#region Header
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                                                                  //
//  ____ ___   ______   .______       _______      ___      .__   __.    .___________.____    ____ .______    _______ .______                                       //
//  |  |/  /  /  __  \  |   _  \     |   ____|    /   \     |  \ |  |    |           |\   \  /   / |   _  \  |   ____||   _  \                                      //
//  |  '  /  |  |  |  | |  |_)  |    |  |__      /  ^  \    |   \|  |    `---|  |----` \   \/   /  |  |_)  | |  |__   |  |_)  |                                     //
//  |    <   |  |  |  | |      /     |   __|    /  /_\  \   |  . `  |        |  |       \_    _/   |   ___/  |   __|  |      /                                      //
//  |  .  \  |  `--'  | |  |\  \----.|  |____  /  _____  \  |  |\   |        |  |         |  |     |  |      |  |____ |  |\  \----.                                 //
//  |__|\__\  \______/  | _| `._____||_______|/__/     \__\ |__| \__|        |__|         |__|     | _|      |_______|| _| `._____|                                 //
//                                                                                                                                                                  //
//  한국어 타자기 입력                                                                                                                                              //
//  2022.09.06 KimYC1223                                                                                                                                            //
//  https://KimYC1223.github.io/                                                                                                                                    //
//                                                                                                                                                                  //
//  자세한 사용법은 https://github.com/KimYC1223/KoreanTyper를 참고하세요 !                                                                                         //
//                                                                                                                                                                  //
//  -------------------------------------------------------------------------------------------------------------------------------------------------------------   //
//  The MIT License (MIT)                                                                                                                                           //
//                                                                                                                                                                  //
//  Copyright(c) 2022 KimYC1223                                                                                                                                     //
//                                                                                                                                                                  //
//  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal      //
//  in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies   //
//  of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:                                         //
//  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.                                  //
//                                                                                                                                                                  //
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,             //
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,   //
//  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.      //
//                                                                                                                                                                  //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#endregion

//====================================================================================================================================================================
//    KoreanTyper 네임 스페이스 사용
//====================================================================================================================================================================
namespace KoreanTyper {

    //================================================================================================================================================================
    //    string 자료형의 Extention class
    //================================================================================================================================================================
    public static class stringExtensions  {

        #region MemberVariables
        //============================================================================================================================================================
        //    한글의 초성, 중성, 종성 모음
        //============================================================================================================================================================
        private static char[] Korean1stWordList = { 'ㄱ','ㄲ','ㄴ','ㄷ','ㄸ',
                                                    'ㄹ','ㅁ','ㅂ','ㅃ','ㅅ',
                                                    'ㅆ','ㅇ','ㅈ','ㅉ','ㅊ',
                                                    'ㅋ','ㅌ','ㅍ','ㅎ' };

        private static char[] Korean2ndWordList = { 'ㅏ','ㅐ','ㅑ','ㅒ','ㅓ',
                                                    'ㅔ','ㅕ','ㅖ','ㅗ','ㅘ',
                                                    'ㅙ','ㅚ','ㅛ','ㅜ','ㅝ',
                                                    'ㅞ','ㅟ','ㅠ','ㅡ','ㅢ',
                                                    'ㅣ' };
        private static char[] Korean3rdWordList = { ' ','ㄱ','ㄲ','ㄳ','ㄴ',
                                                    'ㄵ','ㄶ','ㄷ','ㄹ','ㄺ',
                                                    'ㄻ','ㄼ','ㄽ','ㄾ','ㄿ',
                                                    'ㅀ','ㅁ','ㅂ','ㅄ','ㅅ',
                                                    'ㅆ','ㅇ','ㅈ','ㅊ','ㅋ',
                                                    'ㅌ','ㅍ','ㅎ' };
        #endregion


        #region isSpecialKoreanFunction
        //==========================================================================================================================================================
        // isSpecialKorean : 초성이 없는 특수 한글 중, 두가지 모음이 합쳐진 경우를 찾는 함수
        //==========================================================================================================================================================
        /// <summary>
        /// 초성이 없는 특수 한글 중, 두가지 모음이 합쳐진 경우를 찾는 함수
        /// </summary>
        /// <param name="word">분석하고자 하는 한 글자 단어</param>
        /// <returns></returns>
        private static bool isSpecialKorean(char word) {
            bool isSpecial = false;
            switch(word) {
                case 'ㅘ': case 'ㅙ': case 'ㅚ': case 'ㅝ': case 'ㅞ': case 'ㅟ': 
                case 'ㅢ': case 'ㄳ': case 'ㄵ': case 'ㄶ': case 'ㄺ': case 'ㄻ':
                case 'ㄼ': case 'ㄽ': case 'ㄾ': case 'ㄿ': case 'ㅀ': case 'ㅄ': 
                    isSpecial = true;
                    break;
                default: isSpecial = false; break;
            }
            return isSpecial;
        }
        //==========================================================================================================================================================
        #endregion


        #region GetTypingLengthFunction
        //==========================================================================================================================================================
        // GetTypingLength : 해당 string이 몇 번의 타이핑 횟수를 거쳐 입력되는지 알아보는 함수.
        //==========================================================================================================================================================
        /// <summary>
        /// 해당 string이 몇 번의 타이핑 횟수를 거쳐 입력되는지 알아보는 함수.
        /// </summary>
        /// <returns></returns>
        public static int GetTypingLength (this string str) {

            int result = 0;  // 결과값 저장

            // string의 길이만큼 반복
            for (int index = 0; index < str.Length; index++) {
                //==================================================================================================================================================
                //  한글이 아니거나 불완전한 한글이 아닐 경우 ( Ex. 'A', '1', '★', 'ㅘ' 등등 ... ) 
                //==================================================================================================================================================
                //  불완전한 한글은 맞는데, 'ㅘ' 'ㅞ' 'ㄶ' 'ㄳ'와 같이 2번에 걸쳐 입력해야 하는경우
                if (isSpecialKorean(str[index])) {
                    result += 2; continue; 

                //  알파벳('A', 'b', ... )이나 숫자('1','2', ... ) 또는 특수문자('◆','😊', ... )거나, 불완전한 한글('ㄱ','ㅏ', ... )인 경우 
                } else if ((int)str[index] < (int)'가' || (int)str[index] > (int)'힣') {
                    result += 1; continue;
                }


                //==================================================================================================================================================
                //  정상적인 한글일 경우, 한글을 초성 중성 종성으로 분해하여 진행
                //==================================================================================================================================================
                int wordIntValue = (int)str[index] - (int)'가';
                int korean2ndWord = ( ( wordIntValue ) % ( Korean3rdWordList.Length * Korean2ndWordList.Length ) ) / Korean3rdWordList.Length;
                int korean3rdWord = ( wordIntValue ) % Korean3rdWordList.Length;


                //==================================================================================================================================================
                //  해당 글자의 초성을 타이핑 하는데 들어가는 횟수 구하기
                //==================================================================================================================================================
                //  초성은 무조건 한 번에 입력 가능 
                result++;


                //==================================================================================================================================================
                //  해당 글자의 중성을 타이핑 하는데 들어가는 횟수 구하기
                //==================================================================================================================================================
                switch (korean2ndWord) {
                    // 중성의 경우, 'ㅘ', 'ㅙ', 'ㅚ', 'ㅝ', 'ㅞ', 'ㅟ', 'ㅢ'는 2번에 걸쳐 입력하고,
                    case 9: case 10: case 11: case 14: case 15: case 16: case 19:
                        result += 2; break;
                    // 나머지 경우는 한 번에 입력 가능
                    default:
                        result += 1; break;
                }


                //==================================================================================================================================================
                //  해당 글자의 종성을 타이핑 하는데 들어가는 횟수 구하기
                //==================================================================================================================================================
                switch (korean3rdWord) {
                    // 종성의 경우, 'ㄳ', 'ㄵ', 'ㄶ', 'ㄺ', 'ㄻ', 'ㄼ', 'ㄽ', 'ㄾ', 'ㄿ', 'ㅀ', 'ㅄ' 는 2번에 걸쳐 입력하고,
                    case 3: case 5: case 6: case 9: case 10: case 11:
                    case 12: case 13: case 14: case 15: case 18:
                        result += 2; break;
                    // 종성이 없는 경우(ex. '가', '갸', ...)는 당연히 종성을 0번에 걸쳐 입력하고
                    case 0: break;
                    // 나머지 경우에는 한번에 입력한다.
                    default: result += 1; break;
                }
            }
            return result;
        }
        //==========================================================================================================================================================
        #endregion


        #region TypingFloatFunction
        //==========================================================================================================================================================
        // Typing : 키보드 타이핑 효과 적용하는 함수
        //==========================================================================================================================================================
        /// <summary>
        /// 키보드 타이핑 효과를 적용하는 함수
        /// </summary>
        /// <param name="percent">(float) 키보드 효과 진행률 (0 <= percent <= 1)</param>
        /// <returns></returns>
        public static string Typing(this string str, float percent) {

            if (percent >= 1f) return str;                                  // 1 이상이면, 100% 이므로, 문장 전체 출력
            if (percent <= 0f) return "";                                   // 0 이하면 0% 이므로, 아무것도 출력하지 않음
            int maxLength = str.GetTypingLength();                          // 전체 타이핑 카운트 계산

            return str.Typing((int)(maxLength * percent ));                 // int 타이핑 함수 호출
        }
        //==========================================================================================================================================================
        #endregion


        #region TypingIntFunction
        //==========================================================================================================================================================
        // Typing : 키보드 타이핑 효과 적용하는 함수
        //==========================================================================================================================================================
        /// <summary>
        /// 키보드 타이핑 효과를 적용하는 함수
        /// </summary>
        /// <param name="count">(int) 키보드 효과 진행률 (0 <= count <= string.GetTypingLength())</param>
        /// <returns></returns>
        public static string Typing(this string str, int count) {

            if (count <= 0) return "";                                                  // 타이핑 카운트가 0이라면, 공백 출력
            int maxLength = str.GetTypingLength();                                      // 문장의 최대 타이핑 카운트 계산
            if (count >= maxLength) return str;                                         // 타이핑 카운트가 최대를 넘으면, 문장 전체 출력

            string result_string = "";                                                  // 최종적으로 출력할 문장

            //======================================================================================================================================================
            //  매 문장마다 한 글자씩 확인하고 (index < str.Length), 사용자가 원하는 카운트 만큼 확인 (count > 0)
            //======================================================================================================================================================
            for (int index = 0; index < str.Length && count > 0; index++) {

                bool isSpecial = isSpecialKorean(str[index]);                                                                   // 특수한 한글인지 판단
                int wordIntValue = (int)str[index] - (int)'가';                                                                 // 글자의 int값 추적
                int korean2ndWord = (( wordIntValue ) % (Korean3rdWordList.Length*Korean2ndWordList.Length)) 
                                                                                                / Korean3rdWordList.Length;     // 중성 구하기
                int korean3rdWord = ( wordIntValue ) % Korean3rdWordList.Length;                                                // 종성 구하기
                int wordDrawcount = 1;                                                                                          // 해당 글자의 타이핑 카운트


                //##################################################################################################################################################
                //
                //  STEP 1.
                //  한글자씩 확인하며, 해당 글자에 필요한 타이핑 카운트만큼 count 변수를 감산
                //
                //##################################################################################################################################################
                //  불완전한 한글은 맞는데, 'ㅘ' 'ㅞ' 'ㄶ' 'ㄳ'와 같이 2번에 걸쳐 입력해야 하는경우
                if (isSpecial)
                    count -= 2;                                     // 2번에 걸쳐 입력 가능. count 변수에서 2 감산


                //  알파벳('A', 'b', ... )이나 숫자('1','2', ... ) 또는 특수문자('◆','😊', ... )거나, 불완전한 한글('ㄱ','ㅏ', ... )인 경우 
                else if ((int)str[index] < (int)'가' || (int)str[index] > (int)'힣') {
                    count -= 1;                                     // 한번에 입력 가능.  count 변수에서 1 감산
                    result_string += str[index];                    // 글자를 결과에 추가
                    continue;                                       // 다음 글자로


                // 완전한 한글('가', '턍', '햁', ...)일 경우
                } else {
                    // 초성은 무조건 1 번에 입력 가능하므로 패스,

                    // 중성을 분석함
                    switch( korean2ndWord ) {
                        // 중성의 경우, 'ㅘ', 'ㅙ', 'ㅚ', 'ㅝ', 'ㅞ', 'ㅟ', 'ㅢ'는 2번에 걸쳐 입력하고,
                        case 9: case 10: case 11: case 14: case 15: case 16: case 19:
                            wordDrawcount += 2; break;
                        // 나머지는 한번에 입력 가능
                        default:
                            wordDrawcount += 1; break;
                    }

                    // 종성을 분석함
                    switch( korean3rdWord ) {
                        // 종성의 경우, 'ㄳ', 'ㄵ', 'ㄶ', 'ㄺ', 'ㄻ', 'ㄼ', 'ㄽ', 'ㄾ', 'ㄿ', 'ㅀ', 'ㅄ' 는 2번에 걸쳐 입력하고,
                        case 3: case 5: case 6: case 9: case 10: case 11:
                        case 12:case 13:case 14:case 15:case 18:
                            wordDrawcount += 2; break;
                        // 종성이 없는 경우(ex. '가', '갸', ... )는 당연히 종성을 0번에 걸쳐 입력하고
                        case 0: break;
                        // 나머지 경우에는 한번에 입력한다.
                        default: wordDrawcount += 1; break;
                    }

                    // 계산한 타이핑 카운트 결과 만큼, count 변수에서 감산
                    count -= wordDrawcount;
                }


                //##################################################################################################################################################
                //
                //  STEP 2.
                //  count 값을 통해 출력할 string을 결정
                //  만약 count가 0또는 양수라면, 해당 글자를 표현하고도 타이핑 카운트가 충분하거나 남았다는 뜻이므로, 해당 글자를 그대로 출력
                //  만약 count가 음수라면, 해당 글자를 표현하는데 필요한 타이핑 카운트가 부족하므로, 글자를 분리해서 남은 타이핑 카운트만큼 출력
                //
                //##################################################################################################################################################

                // count값이 0 또는 양수일때, 글자 그대로 출력
                if (count >= 0) {
                    result_string += str[index];

                // count값이 음수일 때, 글자를 분리해서 남은 타이핑 카운트만큼 만 재조립 후 출력
                } else {

                    //==============================================================================================================================================
                    //  불완전한 한글('ㅢ', 'ㅙ', 'ㄾ', 'ㄵ', ... )일 때, 
                    //==============================================================================================================================================
                    if (isSpecial) {
                        char result_char = ' ';
                        switch (str[index]) {
                            // 'ㅗ'를 기본형으로 가지는 것들
                            case 'ㅘ': case 'ㅙ': case 'ㅚ':
                                result_char = 'ㅗ'; break;

                            // 'ㅜ' 를 기본형으로 가지는 것들
                            case 'ㅝ': case 'ㅞ': case 'ㅟ':
                                result_char = 'ㅜ'; break;

                            // 'ㅡ' 를 기본형으로 가지는 것
                            case 'ㅢ':
                                result_char = 'ㅡ'; break;

                            // 'ㄱ'을 기본형으로 가지는 것
                            case 'ㄳ':
                                result_char = 'ㄱ'; break;

                            // 'ㄴ'을 기본형으로 가지는 것들
                            case 'ㄵ': case 'ㄶ':
                                result_char = 'ㄴ'; break;

                            // 'ㄹ'을 기본형으로 가지는 것들
                            case 'ㄺ': case 'ㄻ': case 'ㄼ': case 'ㄽ': case 'ㄾ': case 'ㄿ': case 'ㅀ':
                                result_char = 'ㄹ'; break;

                            // 'ㅂ'을 기본형으로 가지는 것
                            case 'ㅄ':
                                result_char = 'ㅂ'; break;

                            // 기본 값
                            default: result_char = ' '; break;
                        }

                        result_string += result_char;  // 해당 글자를 결과 string에 더함



                    //==============================================================================================================================================
                    //  완전한 한글일 때,
                    //==============================================================================================================================================
                    } else {
                        // 분리 후, 남은 타이핑 횟수만큼 글자를 재조립해야 하기 때문에, 해당 글자의 초성까지 구해야 함
                        int korean1stWord = ( wordIntValue ) / ( Korean3rdWordList.Length * Korean2ndWordList.Length );

                        // 모든 "완전한 한글"은 최대 5번의 타이핑 카운트를 가질 수 있고, 다음과 같은 경우의 수를 가짐
                        // ┌──────┬────────────────────────┬────────┬────────────────────────────────────────┐
                        // │      │                        │        │            남은 타이핑 카운트          │
                        // │  No  │         조합           │  예시  │──────┬──────┬──────┬──────┬──────┬─────┤
                        // │      │                        │        │  1   │  2   │  3   │  4   │  5   │ 합  │
                        // ├──────┼────────────────────────┼────────┼──────┼──────┼──────┼──────┼──────┼─────┤
                        // │   1  │  초성 + 1중성 + 0종성  │  '예'  │  ㅇ  │  ㅖ  │      │      │      │  2  │
                        // ├──────┼────────────────────────┼────────┼──────┼──────┼──────┼──────┼──────┼─────┤
                        // │   2  │  초성 + 1중성 + 1종성  │  '량'  │  ㄹ  │  ㅑ  │  ㅇ  │      │      │  3  │
                        // ├──────┼────────────────────────┼────────┼──────┼──────┼──────┼──────┼──────┼─────┤
                        // │   3  │  초성 + 2중성 + 0종성  │  '쾌'  │  ㅋ  │  ㅗ  │  ㅐ  │      │      │  3  │
                        // ├──────┼────────────────────────┼────────┼──────┼──────┼──────┼──────┼──────┼─────┤
                        // │   4  │  초성 + 1중성 + 2종성  │  '찮'  │  ㅊ  │  ㅏ  │  ㄴ  │  ㅎ  │      │  4  │
                        // ├──────┼────────────────────────┼────────┼──────┼──────┼──────┼──────┼──────┼─────┤
                        // │   5  │  초성 + 2중성 + 1종성  │  '괜'  │  ㄱ  │  ㅗ  │  ㅐ  │  ㄴ  │      │  4  │
                        // ├──────┼────────────────────────┼────────┼──────┼──────┼──────┼──────┼──────┼─────┤
                        // │   6  │  초성 + 2중성 + 2종성  │  '휎'  │  ㅎ  │  ㅜ  │  ㅔ  │  ㅂ  │  ㅅ  │  5  │
                        // └──────┴────────────────────────┴────────┴──────┴──────┴──────┴──────┴──────┴─────┘


                        //==========================================================================================================================================
                        //  남은 카운트가 1일 경우, 방금 구한 초성을 출력함
                        //==========================================================================================================================================
                        if (wordDrawcount + count == 1) {
                            result_string += Korean1stWordList[korean1stWord];


                        // 남은 카운트가 2 이상일 경우, 글자를 조립 해야함
                        } else{

                            // 조립을 위해 초성에 해당하는 기본 글자를 구함. (Ex. '걊' -> ㄱ -> '가' / '동' -> ㄷ -> '다' / '훼' -> ㅎ -> '하' / ... )
                            int new_word_index = (int)'가' + ( korean1stWord  * Korean3rdWordList.Length * Korean2ndWordList.Length );

                            //======================================================================================================================================
                            //  남은 카운트가 2일 경우, 초성과 모음을 결합한 글자 출력
                            //======================================================================================================================================
                            if (wordDrawcount + count == 2) {
                                switch( korean2ndWord ) {
                                    // 중성이 'ㅘ', 'ㅙ', 'ㅚ' 인 경우, 초성 + 'ㅗ' 출력
                                    case 9: case 10: case 11:
                                        new_word_index += 8 * Korean3rdWordList.Length; break;

                                    // 중성이 'ㅝ', 'ㅞ', 'ㅟ' 인 경우, 초성 + 'ㅜ' 출력
                                    case 14: case 15: case 16:
                                        new_word_index += 13 * Korean3rdWordList.Length; break;

                                    // 중성이 'ㅢ'인 경우, 초성 + 'ㅡ' 출력
                                    case 19:
                                        new_word_index += 18 * Korean3rdWordList.Length; break;

                                    // 해당 사항 없으면 초성 + 중성 출력 
                                    default:
                                        new_word_index += korean2ndWord * Korean3rdWordList.Length; break;
                                }

                            //======================================================================================================================================
                            //  남은 카운트가 3일 경우
                            //======================================================================================================================================
                            } else if (wordDrawcount + count == 3) {
                                bool flag = false;                                                  // 중성이 모음 2개로 이루어져 있는지
                                switch( korean2ndWord ) {
                                    // 'ㅘ' 'ㅙ' 'ㅚ' 'ㅝ' 'ㅞ' 'ㅟ' 'ㅢ' 라면, flag는 true
                                    case 9: case 10: case 11: case 14: case 15: case 16:case 19:
                                        flag = true; break;
                                    default: break;
                                }

                                // 일단 카운트가 3이상이면 초성 + 중성 출력
                                new_word_index += korean2ndWord * Korean3rdWordList.Length;

                                // 중성이 모음 하나로 이루어져 있었다면, 이번에는 종성까지 출력
                                if (!flag) {

                                    // 종성이 자음 2개로 이루어져 있다면, 기본형만 출력하고 아니면 전부 출력
                                    switch( korean3rdWord ) {
                                        // 종성이 'ㄳ'일 경우, 'ㄱ' 출력
                                        case 3:
                                            new_word_index += 1; break;

                                        // 종성이 'ㄵ' 'ㄶ'일 경우, 'ㄴ' 출력
                                        case 5: case 6:
                                            new_word_index += 4; break;

                                        // 종성이 'ㄺ' 'ㄻ' 'ㄼ' 'ㄽ' 'ㄾ' 'ㄿ' 'ㅀ'일 경우, 'ㄹ' 출력
                                        case 9: case 10: case 11: case 12: case 13: case 14: case 15:
                                            new_word_index += 8; break;

                                        // 종성이 'ㅄ' 일 경우, 'ㅂ' 출력
                                        case 18:
                                            new_word_index += 17; break;

                                        // 종성이 하나의 자음이라면, 모두 출력
                                        default:  new_word_index += korean3rdWord; break;
                                    }
                                }

                            //======================================================================================================================================
                            //  남은 카운트가 4일 경우
                            //======================================================================================================================================
                            } else if (wordDrawcount + count == 4) {
                                bool flag = false;                                                  // 중성이 모음 2개로 이루어져 있는지
                                switch ( korean2ndWord ) {
                                    // 'ㅘ' 'ㅙ' 'ㅚ' 'ㅝ' 'ㅞ' 'ㅟ' 'ㅢ' 라면, flag는 true
                                    case 9: case 10: case 11: case 14: case 15: case 16:case 19:
                                        flag = true; break;
                                    default: break;
                                }
                                // 일단 카운트가 3이상이면 초성 + 중성 출력
                                new_word_index += korean2ndWord * Korean3rdWordList.Length;

                                // 중성이 모음 하나로 이루어져 있는 경우, 초성 + 중성 + 종성 출력
                                if (!flag) new_word_index += korean3rdWord;

                                // 중성이 모음 여러개로 이루어져 있는 경우, 종성 하나 출력
                                else {
                                    switch( korean3rdWord ) {
                                        // 종성이 'ㄳ'일 경우, 'ㄱ' 출력
                                        case 3:
                                            new_word_index += 1; break;

                                        // 종성이 'ㄵ' 'ㄶ'일 경우, 'ㄴ' 출력
                                        case 5: case 6:
                                            new_word_index += 4; break;

                                        // 종성이 'ㄺ' 'ㄻ' 'ㄼ' 'ㄽ' 'ㄾ' 'ㄿ' 'ㅀ'일 경우, 'ㄹ' 출력
                                        case 9: case 10: case 11: case 12: case 13: case 14: case 15:
                                            new_word_index += 8; break;

                                        // 종성이 'ㅄ' 일 경우, 'ㅂ' 출력
                                        case 18:
                                            new_word_index += 17; break;

                                        // 종성이 하나의 자음이라면, 모두 출력
                                        default: new_word_index += korean3rdWord; break;
                                    }
                                }
                            //======================================================================================================================================
                            //  남은 카운트가 5일 경우
                            //======================================================================================================================================
                            } else if (wordDrawcount + count == 5) {
                                // 초성 + 중성 + 종성
                                new_word_index += korean2ndWord * Korean3rdWordList.Length;
                                new_word_index += korean3rdWord;
                            }

                            //======================================================================================================================================
                            //  결과를 result_string에 저장
                            //======================================================================================================================================
                            result_string += (char)(new_word_index);
                        }
                    }
                }
            }

            // 모든 글자를 돌거나, count 변수가 음수가 되었다면, 지금까지 계산한 result_string값 출력
            return result_string;
		}
        //==========================================================================================================================================================
        #endregion
    }
}
